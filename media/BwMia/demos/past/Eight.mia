;
; Eight : Mia Eight Puzzle Implementation
;
(persona Eight (blah blah blah)
	(mode main
	)
	(mode idle
		(assert (
			(:state topic ?g)
			(?g type goal)
			(not(?g is suspended))
			(not(?g is achieved))		
			-->
			(:agent achieve ?g)
			)
			==>
			main
			==>
			main
		)
	)	
	
(op IsAcheivedElab (?g is achieved)
	(mode main
		(assert (
			(?g is achieved)
			-->
			(:state benefit 2)
			)
			==>
			success
			==>
			failure
		)
	)
)	
; fix this to work on any goals ... (?g type goal) (?g is acheived) ...
(op AllGoals (?g is achieved)
	(mode main
		(assert (
			(?g is achieved)
			(Goal-1 is achieved)
			(Goal-2 is achieved)
			(Goal-3 is achieved)
			-->
			)
			==>
			halt
			==>
			failure
		)
	)
)
(op StackerPropose (:agent achieve ?g)
	(mode guard 
		(assert (
			(?g object ?d1)
			(?g destination ?d2)
			(?g at ?p1)
			(?d1 on-top ?d2)
			(?d1 at ?p1)
			-->
			(?g is achieved)
			)
			==>
			failure
			==>
			main
		)
	)
	(mode main
		(propose (
			(?g object ?d1)
			(?g destination ?d2)
			(?g at ?p1)
			-->
			((:agent stack ?d1)
				(destination ?d2)
				(at ?p1)
			)
			)
			==>
			success
			==>
			failure
		)
	)
)
(op StateElab (:state type state)
	(mode main
		(assert (
			-->
			(:state is good)
			)
			==>
			success
			==>
			failure
		)
	)
)
(op ClearApply (:agent clear ?x)
	(mode main
		(propose (
			(?x beneath ?y)
			(?x at ?p1)					
			(:state topic ?z)		
			(?x <> ?z)
			(?y <> ?z)			
			(?z at ?p2)
			(?p2 <> ?p1)
			(?z is clear)
			(?y size ?s1)
			(?z size ?s2)
			(?s1 < ?s2)
			-->
			((:agent stack ?y)
				(destination ?z)
				(at ?p2)
			)
			)
			==>		
			success
			==>
			failure
		)
	)
)
(op StackerApply (:agent stack ?x)
	(mode guard1
		(propose (
			(not(?x is clear))
			-->
			(:agent clear ?x)
			)
			==>
			failure
			==>
			guard2
		)
	)
	(mode guard2
		(propose (
			(:fact destination ?y)
			(not(?y is clear))
			-->
			(:agent clear ?y)
			)
			==>
			failure
			==>
			main
		)
	)
	(mode main
		(retract (
			(?x on-top ?z)
			-->
			(?x on-top ?z)
			)
		)
		(retract (
			(?x at ?p1)
			-->
			(?x at ?p1)
			)
		)
		(assert (
			(:fact destination ?y)
			-->
			(?x on-top ?y)
			)
		)		
		(assert (
			(:fact at ?p2)
			-->
			(?x at ?p2)
			)
			==>
			success
			==>
			failure
		)
	)
)
; -1 means to match a retraction

(op NotOnTopElab (?x on-top ?y -1)
	(mode main
		(retract (
			(?y beneath ?x)
			-->
			(?y beneath ?x)
			)
		)
		(assert (
			-->
			(?y is clear)
			)
			==>
			success
			==>
			failure	
		)
	)
)
(op OntopElab (?x on-top ?y)
	(mode main
		(retract (
			(?y is clear)
			-->
			(?y is clear)
			)
		)
		(assert (
			(?x on-top ?y)
			-->
			(?y beneath ?x)
			)
			==>
			success
			==>
			failure
		)
	)
)
(op HasDependentElab (?a depends-on ?b)
	(mode main
		(assert (
			(?a depends-on ?b)
			-->
			(?b has-dependent ?a)
			)
			==>
			success
			==>
			failure
		)
	)
)
(op DependsOnElab (?a depends-on ?b)
	(mode main
		(assert (
			(?a depends-on ?b)
			(?b depends-on ?c)
			-->
			(?a indirectly-depends-on ?c)
			)
			==>
			success
			==>
			failure
		)
	)
)
(op SuspendedElab (?a depends-on ?b)
	(mode main
		(assert (
			(?a depends-on ?b)
			(not(?b is achieved))
			-->
			(?a is suspended)
			)
			==>
			success
			==>
			failure
		)
	)
)
(op NotSuspendedElab (?a is achieved)
	(mode main
		(retract (
			(?a has-dependent ?b)
			(?b is suspended)
			-->
			(?b is suspended)
			)
			==>
			success
			==>
			failure
		)
	)
)
)
(concept Peg-1
	(type peg)
	(at Peg-1)
	(size 4)
)
(concept Peg-2
	(type peg)
	(is clear)
	(at Peg-2)
	(size 4)
)
(concept Peg-3
	(type peg)
	(is clear)
	(at Peg-3)
	(size 4)
)

(concept Disc-1
	(type disc)
	(at Peg-1)
	(on-top Disc-2)
	(is clear)
	(size 1)
)
(concept Disc-2
	(type disc)
	(at Peg-1)
	(on-top Disc-3)
	(size 2)
)
(concept Disc-3
	(type disc)
	(at Peg-1)
	(on-top Peg-1)
	(size 3)
)
(concept Goal-1
	(type goal)
	(depends-on Goal-2)
	(action move)
	(object Disc-1)
	(destination Disc-2)
	(at Peg-3)
)
(concept Goal-2
	(type goal)
	(depends-on Goal-3)
	(action move)
	(object Disc-2)
	(destination Disc-3)
	(at Peg-3)
)
(concept Goal-3
	(type goal)
	(action move)
	(object Disc-3)
	(destination Peg-3)
	(at Peg-3)
)